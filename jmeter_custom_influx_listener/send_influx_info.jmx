<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="vars general" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="influx_files_data_path" elementType="Argument">
            <stringProp name="Argument.name">influx_files_data_path</stringProp>
            <stringProp name="Argument.value">C:\WORK\CGIS\results\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pont_rows" elementType="Argument">
            <stringProp name="Argument.name">pont_rows</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">how many points will be send in each query</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8086</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="influxDB_name" elementType="Argument">
            <stringProp name="Argument.name">influxDB_name</stringProp>
            <stringProp name="Argument.value">InfluxDB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="jsr223 search fo docs" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// defaults: counter
vars.put(&quot;counter&quot;, &quot;1&quot;);
List&lt;String&gt; filePaths = new ArrayList&lt;&gt;();
// get path to look for params
String filesPath = vars.get(&quot;influx_files_data_path&quot;);
filePaths = findValidFiles(filesPath, &quot;.*csv&quot;);		// find all valid files in path
int filesCount = filePaths.size();					// count found files
if (filesCount &lt;= 0) {
//	log.error(&quot;no files found! + &quot; filesPath))
	return
}
vars.put(&quot;filePaths_0&quot;, String.valueOf(filesCount));		// save files count

// save all paths
int i = 1;
for (String fileName : filePaths) {
	String newVarName = &quot;filePaths_&quot; + i;
	vars.put(newVarName, fileName);
	i++;
}

/**
* get list of valid files
* @param catalogPath - path to catalog where to look for
* @param fileMatcher - regexp for file to look for
* @return list of files paths
*/
List&lt;String&gt; findValidFiles(String catalogPath, String fileMatcher) {
   List&lt;String&gt; foundFiles = new ArrayList&lt;&gt;();
   List&lt;File&gt; filesInWork = listFilesFromFolder(catalogPath);
   if (filesInWork.isEmpty()) {
       return foundFiles;
   }
   for (File file : filesInWork) {
       String checkName = file.getName();
       if (!checkName.matches(fileMatcher)) {
           continue;
       }
       foundFiles.add(file.getAbsolutePath());
   }
   return foundFiles;
}

/**
* get all files from folder
* @param path - folder path
* @return list with all folder files
*/
List&lt;File&gt; listFilesFromFolder(String path) {
   List&lt;File&gt; files = new ArrayList&lt;&gt;();
   File[] filesArray = new File(path).listFiles();
   if(filesArray == null || filesArray.length &lt; 1) {
       return files;
   }
   for (final File fileEntry : filesArray) {
       if (!fileEntry.isDirectory()) {
           files.add(fileEntry);
       }
   }
   return files;
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller (filePaths_0 &gt; 0)" enabled="true">
          <stringProp name="IfController.condition">${__groovy(Integer.parseInt(vars.get(&quot;filePaths_0&quot;)) &gt; 0)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller = filePaths_0" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${filePaths_0}</stringProp>
          </LoopController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="jsr223 prepare packs from doc" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// defaults
List&lt;String&gt; fileLines = new ArrayList&lt;&gt;();
int numberOfPacks = 1;						// needed to count all created packs of points

// set pack number, need to iterate in the next loop
vars.put(&quot;pack_counter&quot;, &quot;1&quot;);
// get counter
int count = Integer.parseInt(vars.get(&quot;counter&quot;));
// get point rows - how many points will be send in each query
int pointSize = Integer.parseInt(vars.get(&quot;pont_rows&quot;));
// get file
String varName = &quot;filePaths_&quot; + String.valueOf(count);
String paramFilePath = vars.get(varName);
// log
log.info(&quot;___________ found file: &quot; + paramFilePath.toString());
//
// read file
new File(paramFilePath).eachLine { fileLine -&gt;
	if (!fileLine.trim().isEmpty()) {
		fileLines.add(fileLine)
	}
}
//
// check if file is not empty
if (fileLines.size() &lt;= 0) {
//	log.error(&quot;empty file! + &quot; paramFilePath.toString())
	return;
}
// read file lines and form packs of points
// check if lines count is bigger then pack of points size
if (fileLines.size() &gt; pointSize) {
	int lastPackSize = fileLines.size() % pointSize;				// last pack size
	int standartPacksCount = fileLines.size() / pointSize;			// count all packs except last one
	// save all standart packs into vars
	for(int i = 0; i &lt; standartPacksCount; i++) {
		numberOfPacks = saveLinesPack(numberOfPacks, fileLines, pointSize*i, pointSize*i+pointSize)
	}
	if (lastPackSize &gt; 0) {
		// put last pack
		numberOfPacks = saveLinesPack(numberOfPacks, fileLines, (fileLines.size() - lastPackSize - 1), fileLines.size())
	}
} else {
	// if there are not enough lines in file - it all will be saved in one pack
	numberOfPacks = saveLinesPack(numberOfPacks, fileLines, 0, fileLines.size())
}
// log
log.info(&quot;___________ saved number of packs: &quot; + String.valueOf(numberOfPacks - 1));

// save packs count. -1, because it&apos;s a counter
vars.put(&quot;query_post_0&quot;, String.valueOf(numberOfPacks - 1));

// iterate and save
vars.put(&quot;counter&quot;, String.valueOf(count + 1));

/**
 * save pack of lines into var
 * @param currentPackCount - counter for all saved packes of points for current file
 * @param fileLines - list with all current file lines
 * @param firstIndex - start line in fileLines for pack
 * @param lastIndex - last line in fileLines for pack
 * @return new packs counter value
 */ 
int saveLinesPack(int currentPackCount, List&lt;String&gt; fileLines, int firstIndex, int lastIndex) {
	String newVarName = &quot;query_post_&quot; + currentPackCount;
	StringBuffer requestBuff = new StringBuffer();
	for(int k = firstIndex; k &lt; lastIndex; k++) {
		requestBuff.append(fileLines.get(k).trim()).append(&quot;\n&quot;);
	}
	vars.put(newVarName, requestBuff.toString());
	return ++currentPackCount;
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller (query_post_0 &gt; 0)" enabled="true">
              <stringProp name="IfController.condition">${__groovy(Integer.parseInt(vars.get(&quot;query_post_0&quot;)) &gt; 0)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller = query_post_0" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${query_post_0}</stringProp>
              </LoopController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="jsr223 save pack into query body" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// get counter
int count = Integer.parseInt(vars.get(&quot;pack_counter&quot;))
// get pack
String newPackVarName = &quot;query_post_&quot; + String.valueOf(count)
String queryValue = vars.get(newPackVarName)

// save pack for current query on current iteration
vars.put(&quot;current_query&quot;, queryValue)

// iterate and save
vars.put(&quot;pack_counter&quot;, String.valueOf(count + 1))</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="influx_send" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${current_query}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/write?db=${influxDB_name}&amp;precision=ns</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
